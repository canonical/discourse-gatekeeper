name: E2E Tests

on:
  pull_request:

jobs:
  e2e-tests-reconcile:
    runs-on: ubuntu-22.04
    steps:
      # Each job has to have this configuration because secrets can be passed through the output of
      # another job
      - name: Generate discourse configuration
        id: configuration
        run: |
          echo "discourse= \
            { \
              \"hostname\":\"discourse.charmhub.io\", \
              \"category_id\":\"41\", \
              \"api_username\":\"${{ secrets.DISCOURSE_API_USERNAME }}\", \
              \"api_key\":\"${{ secrets.DISCOURSE_API_KEY }}\" \
            }" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v3
      - name: Prepare for action to run
        run: |
          # Create metadata.yaml file
          echo "name: $(echo ${{ github.repository }} | sed 's:.*/::')-test" > metadata.yaml
          # Create documentation index file
          mkdir docs
          # need some values in the content that change on every commit as discourse looks for file
          # similarity
          echo -e "# Charm Upload Automation Reconcile Test Index Title some uuid: $(uuidgen)\n" \
            "placeholder index content for testing, " \
            "repository: ${{ github.repository }}, " \
            "branch: ${{ github.head_ref }}, " \
            "commit sha: ${{ github.sha }}, " \
            "some uuid: $(uuidgen)" \
            > docs/index.md
          echo -e "# Charm Upload Automation Reconcile Test Documentation Title some uuid: $(uuidgen)\n" \
            "placeholder documentation content for testing, " \
            "repository: ${{ github.repository }}, " \
            "branch: ${{ github.head_ref }}, " \
            "commit sha: ${{ github.sha }}, " \
            "some uuid: $(uuidgen)" \
            > docs/doc.md
          echo -e "# Charm Upload Automation Reconcile Test Documentation Alternate Title some uuid: $(uuidgen)\n" \
            "placeholder documentation alternate content for testing, " \
            "repository: ${{ github.repository }}, " \
            "branch: ${{ github.head_ref }}, " \
            "commit sha: ${{ github.sha }}, " \
            "some uuid: $(uuidgen)" \
            > docs/alternate_doc.md
      - name: Draft self test
        id: e2e-test-draft
        uses: ./
        with:
          discourse_host: discourse.charmhub.io
          discourse_api_username: ${{ secrets.DISCOURSE_API_USERNAME }}
          discourse_api_key: ${{ secrets.DISCOURSE_API_KEY }}
          dry_run: true
      - name: Show pages
        run: echo '${{ steps.e2e-test-draft.outputs.urls_with_actions }}'
      - name: Check draft
        run: |
          sudo apt update && sudo apt install python3-pip git
          pip3 install -r requirements.txt
          PYTHONPATH=$(pwd) python3 prepare_check_cleanup/reconcile.py --action check-draft --action-kwargs '{"expected_url_results": []}' '${{ steps.e2e-test-draft.outputs.urls_with_actions }}' '${{ steps.configuration.outputs.discourse }}'
      - name: Create self test
        id: e2e-test-create
        uses: ./
        with:
          discourse_host: discourse.charmhub.io
          discourse_api_username: ${{ secrets.DISCOURSE_API_USERNAME }}
          discourse_api_key: ${{ secrets.DISCOURSE_API_KEY }}
      - name: Show pages
        run: echo '${{ steps.e2e-test-create.outputs.urls_with_actions }}'
      - name: Check create
        run: |
          PYTHONPATH=$(pwd) python3 prepare_check_cleanup/reconcile.py --action check-create --action-kwargs '{"expected_url_results": ["success", "success", "success"]}' '${{ steps.e2e-test-create.outputs.urls_with_actions }}' '${{ steps.configuration.outputs.discourse }}'
      - name: Add docs key to metadata
        run: |
          echo "docs: ${{ steps.e2e-test-create.outputs.index_url }}" >> metadata.yaml
          cat metadata.yaml
      - name: Delete the alternate doc with delete_topics disabled
        run: rm docs/alternate_doc.md
      - name: Delete topics disabled self test
        id: e2e-test-delete-topics
        uses: ./
        with:
          delete_topics: false
          discourse_host: discourse.charmhub.io
          discourse_api_username: ${{ secrets.DISCOURSE_API_USERNAME }}
          discourse_api_key: ${{ secrets.DISCOURSE_API_KEY }}
      - name: Show pages
        run: echo '${{ steps.e2e-test-delete-topics.outputs.urls_with_actions }}'
      - name: Check delete topics disabled
        run: |
          PYTHONPATH=$(pwd) python3 prepare_check_cleanup/reconcile.py --action check-delete-topics --action-kwargs '{"expected_url_results": ["success", "skip", "success"]}' '${{ steps.e2e-test-delete-topics.outputs.urls_with_actions }}' '${{ steps.configuration.outputs.discourse }}'
      - name: Delete the doc with delete_topics enabled
        run: rm docs/doc.md
      - name: Delete topics enabled self test
        id: e2e-test-delete
        uses: ./
        with:
          discourse_host: discourse.charmhub.io
          discourse_api_username: ${{ secrets.DISCOURSE_API_USERNAME }}
          discourse_api_key: ${{ secrets.DISCOURSE_API_KEY }}
      - name: Show pages
        run: echo '${{ steps.e2e-test-delete.outputs.urls_with_actions }}'
      - name: Check delete topics enabled
        run: |
          PYTHONPATH=$(pwd) python3 prepare_check_cleanup/reconcile.py --action check-delete --action-kwargs '{"expected_url_results": ["success", "success"]}' '${{ steps.e2e-test-delete.outputs.urls_with_actions }}' '${{ steps.configuration.outputs.discourse }}'
      - name: Clean up
        if: always()
        run: |
          PYTHONPATH=$(pwd) python3 prepare_check_cleanup/reconcile.py --action cleanup '${{ steps.e2e-test-create.outputs.urls_with_actions }}' '${{ steps.configuration.outputs.discourse }}'
  e2e-tests-migration:
    permissions: write-all
    runs-on: ubuntu-22.04
    steps:
      # Each job has to have this configuration because secrets can be passed through the output of
      # another job
      - name: Generate discourse configuration
        id: configuration
        run: |
          echo "discourse= \
            { \
              \"hostname\":\"discourse.charmhub.io\", \
              \"category_id\":\"41\", \
              \"api_username\":\"${{ secrets.DISCOURSE_API_USERNAME }}\", \
              \"api_key\":\"${{ secrets.DISCOURSE_API_KEY }}\" \
            }" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v3
      - name: Prepare discourse topics
        id: prepare-discourse
        run: |
          # Create topics on discourse
          MIGRATION_DIR=migration_docs
          mkdir $MIGRATION_DIR
          # need some values in the content that change on every commit as discourse looks for file
          # similarity
          INDEX_FILENAME=$MIGRATION_DIR/index.md
          echo -e "# Charm Upload Automation Migration Test Index Title some uuid: $(uuidgen)\n" \
            "placeholder index content for testing, " \
            "repository: ${{ github.repository }}, " \
            "branch: ${{ github.head_ref }}, " \
            "commit sha: ${{ github.sha }}, " \
            "some uuid: $(uuidgen)" \
            > $INDEX_FILENAME
          PAGE_FILENAME=$MIGRATION_DIR/page.md
          echo -e "# Charm Upload Automation Migration Test Documentation Title some uuid: $(uuidgen)\n" \
            "placeholder documentation content for testing, " \
            "repository: ${{ github.repository }}, " \
            "branch: ${{ github.head_ref }}, " \
            "commit sha: ${{ github.sha }}, " \
            "some uuid: $(uuidgen)" \
            > $PAGE_FILENAME
          # Create discourse topics
          sudo apt update && sudo apt install python3-pip git
          pip3 install -r requirements.txt
          DISCOURSE_CONFIG='${{ steps.configuration.outputs.discourse }}'
          PYTHONPATH=$(pwd) python3 prepare_check_cleanup/migration.py --action prepare --action-kwargs "{\"index_filename\": \"$INDEX_FILENAME\", \"page_filename\": \"$PAGE_FILENAME\", \"discourse_config\": $DISCOURSE_CONFIG}"
      - name: Show created topics
        run: echo '${{ steps.prepare-discourse.outputs.topics }}'
      - name: Create metadata.yaml
        run: |
          # Create metadata.yaml file
          echo "name: $(echo ${{ github.repository }} | sed 's:.*/::')-test" > metadata.yaml
          echo "docs: ${{ steps.prepare-discourse.outputs.index_url }}" >> metadata.yaml
          cat metadata.yaml
      - name: Run migration
        id: run-migration
        uses: ./
        with:
          discourse_host: discourse.charmhub.io
          discourse_api_username: ${{ secrets.DISCOURSE_API_USERNAME }}
          discourse_api_key: ${{ secrets.DISCOURSE_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Check migration branch got created
        run: |
          PYTHONPATH=$(pwd) python3 prepare_check_cleanup/migration.py --action check-branch --action-kwargs '{"github_access_token": "${{ secrets.GITHUB_TOKEN }}"}'
      - name: Check migration pull request got created
        run: |
          PYTHONPATH=$(pwd) python3 prepare_check_cleanup/migration.py --action check-pull-request --action-kwargs '{"github_access_token": "${{ secrets.GITHUB_TOKEN }}"}'
      - name: Clean up
        if: always()
        run: |
          DISCOURSE_CONFIG='${{ steps.configuration.outputs.discourse }}'
          PYTHONPATH=$(pwd) python3 prepare_check_cleanup/migration.py --action cleanup --action-kwargs "{\"topics\": ${{ steps.prepare-discourse.outputs.topics }}, \"github_access_token\": \"${{ secrets.GITHUB_TOKEN }}\", \"discourse_config\": $DISCOURSE_CONFIG}"
